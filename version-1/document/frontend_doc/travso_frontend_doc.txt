
Travso App Development Documentation
LOGIN AND SIGNUP MODULE DOC

Project Name :- Travso

==========================================================================

Process = SignUp
Main Component = SignupPage.jsx
Folder Destination :- src/Components/MainPages/SignupPage.jsx

=> Created designs of all pages of signup. Sign up process consists of following Steps :-
  Step-1 : Gather Basic information of user like:-
	   i) Full Name
    ii) Gender
	 iii) State
    iv) City
     v) DOB
	  vi) Email-id
	 vii) Mobile Number

  -> component used = SignupStep1.jsx

  When user provides above details and clicks on next button, we ask for OTP verification on given 
  mobile number. Once the user is verified we move to step-2.

 Step-2 : On Step-2 we have two button asking for "Are you an influencer?". By default we it is "No".
	  If user selects "Yes", Then we ask for any two social media links. User will have to provide
	  atleast one social media link. In this we set the type of user(influencer or traveler(default))

   -> component used = InfluencerPage.jsx
   
 Step-3 : This is the final Process of Signup. we ask for user details like:-
	  i) username
	  ii) Description
	  iii) Create Passsword
	  iv) Confirm Password

	Once the user fills all entries, we will redirect to login page if api response is success.

   -> component used = AlmostPage.jsx


================================================================================================================

Redux slice for calling Signup Process apis
folder destination :- src/redux/authSlice
=>  created thunk functions :-
1)  registerUser function :- It is calling signup api from backend and storing data in user state.
2)  generateOtp function :- It is calling otp api with generate action.
3)  verifyOtp function :- It is calling otp api with verify action.
4)  resendOTP function :- It is calling resend-otp api for a new OTP.
 =>  Used on SignupStep1.jsx in handleNextStep1() function.

5) finalSignup function :- It is calling final-signup for taking user name, description and password.
 =>  Used on SignUp.jsx in handleSubmit() function.

6) setInfluencerType :- It is calling followers-count api to verify a user can be set as influencer or not.
 =>  Used on InfluencerPage.jsx in handleNextStep2() function.

7) loginUser function :- It is calling login api.
 =>  Used on LoginPage.jsx in handleSubmit() function.

8) getEmailOTP function :- It is calling email-otp api to get email otp(forgot password section).
 =>  Used on LoginPage.jsx in handleNext() function.

9) getMobileOTPForgotPass function :- It is calling mobile-otp to get otp on mobile(forgot password section).
 =>  Used on LoginPage.jsx in handleNext() function.

10) verifyForgotPassOTP function :- It is calling fp-otp-verify api to verify otp sent on mobile number or email(forgot password section).
=>  Used on LoginPage.jsx in handleVerify() function.

11) updatePassword function :- It is calling update-password api to create new password(forgot password section).
=>  Used on LoginPage.jsx in handleSubmitPassword() function.


-> Redux for state and city api:-
folder destination :- src/redux/StateCitySlice.js
1) fetchStates function :- It is calling third-party api for states of India.
2) fetchCities function :- It is calling third-part api for cities of particular state.

 =>  fetchStates -> Used on SignupStep1.jsx in useEffect() function.
=>  fetchCities -> Used on SignupPage.jsx in handleSelectChange() function.

=========================================================================================================

Process :- Login and forgot Password

1) Taking user name and password for login and calling handleSubmit() function for login.
   redux function used :- loginUser()

2) forgot password section :-
   i) Through mobile otp :- Taking user mobile number and username and calling handleNext() function.
  ii) Through email otp :- Taking user email and username and calling handleNext() function.
 iii) Verify OTP :- OTP fields to enter OTP and calling handleVerify() function which in return calls verifyForgotPassOTP() function from redux.
  iv) Change Password :- Inputs for password and confirm password and calling handleSubmitPassword() function which calls updatePassword() from redux.


For validation :-
  i) Login :- validateInputs() function is used.
 ii) Forgot Password :- validateFpInputs() is used.

 Note:- Updated functionality on 02-dec-2024 for new flow:-
    In handleSubmit function on LoginPage.jsx, Updated the condition for, If user didn't picked three categories or followed 3 persons he will
    be redirected to edit profile, else he will be redirected to profile page.

 =========================================================================================================

Process :- User MODULE

-> Redux functions used

file:- postSlice.js
1) getAllPosts function :- It is fetching all posts.
2) commentOnPost function :- It is used to send the comment to backend which a user has made on any post.
3) LikeUnlikePost function :- It is used to send data to backend for like and unlike on any post

file:- authSlice.js
1) getUserBuddies function :- It is used to fetch buddies data of a user.
2) getUserFollowers function :- It is used to fetch the follower of a user.
3) toWhomUserIsFollowing function :- It is used to fetch to whom user is following.
4) getUserDetails function :- Fetching user details like full_name, user_name.
5) getUserPosts function :- It is fetching user's post.
6) removeProfileImage :- It is calling api which will delete user profile image from database.
7) getAllUsers function :- It is calling api to fetch users, which we will use in search filter.
8) removeCoverImage function :- It is calling api to remove cover image.
9) uploadCoverImage function :- It is calling api to upload cover image.
10) uploadProfileImage function :- It is calling api to update profile image of user.

file destination :- src/Components/OtherPages/Sidebar.jsx

We are using following redux functions on this page for showing information on POST section, Info, buddies, followers and following of a user
1) getUserBuddies()
2) getUserDetails()
3) getUserPosts()
4) getUserFollowers()
5) toWhomUserIsFollowing()

file destination :- src/Components/OtherPages/AllPopupComponent/CommentPopup.jsx
=> CommentPopup Component :- Used on to show comment of particular post.
                          -> Handled by setActivePostId state.(to show popup)
                          -> We pass post id to this component and using this show the data of post on popup.
                          -> Badge is shown through ShowBadgeIcon component
                          


file destination :- src/Components/OtherPages/EditProfile.jsx

1) handleCoverUpload() function :- Using redux function uploadCoverImage() to upload a cover image.
2) removeCoverPic() function :- Using redux function removeCoverImage(), removing cover photo on edit profile page.
3) handleImageRemove() function :- Using redux function removeProfileImage(), removing profile image of user.
4) Showing all the details of user using getUserDetails() function.
5) Using redux function fetchCities(), giving dropdown to select city for edit.


file destination :- src/Components/OtherPages/SuggestionPage.jsx.(static page on 02-dec-2024)

1) checkFollowedCount() function :- Implemented the functionality to follow 3 categories or people, then only Next button is enabled.
2) handleNext() function :- When User selects 3 people or community and clicks on Next Button, using redux function updateSelectFollow() function
                           to update the check of is_follow_selected in Database.


file destination :- src/Components/OtherPages/AllPopupComponent/CommentPopup.jsx
1) sendReplyComment() function :- It is taking commentId, postId and using redux function commentOnReply(), implemented reply on
   comment functionality.
2) handleReplyInputEnter() function :- Handling comment on reply for if user writes something and hit enter button.
3) sendComment() function :- For commenting on post.Uses commentOnPost() redux function.
4) getTimeDifferenceFromNow() :- It returns the time of comment in minutes, hours and days
                               -> If less than 60 minutes, it returns minutes.
                               -> If less than 24 hours, it returns hour.
                               -> If more than 24 hours, it return days.
5) handleCommentLikeUnlike() :- for Like and Unlike on any comment.
6) handleEditComment() :- This function uses editComment() redux function to call edit api and update the comment. Edit option is enabled
                           for the user if he has commented and on other user comment he has option to block user.
7) blockTheUser() :- On comment and reply user have the option to block the user.

file destination :- src/Components/OtherPages/CommunityRightSidebar.jsx
1) Using displayedFriends shown active friends. If user clicks on show all actives then all actives are shown otherwise 8 people are
   shown.
2) Shown list of suggestion people(rightnow with all user later will change in backend api) and implemented the functionality of
   follow and unfollow using redux function followUnfollow() in handleFollow() function.


file destination :- src/Components/OtherPages/AllPopupComponent/CreateaPostPopup.jsx
=> This component takes props -> isOpen, onClose, openPostDetail, postData, setPostData
-> postData contains all data like description,tags,buddies_id etc. which comes from parent component.
1) Using postData state to handle all input data which a user will fill to post.
2) handleBuddyTag() function :- As soon as user write @, a list will appear of his buddies.
3) handleSuggestionClick() function :- When user clicks on any suggestion it is stored in postData and also shown on UI with cancel
   mark.
4) handleRemoveBuddy() :- Allows user to remove tagged buddy.
5) handleTagEnter() :- It is used to set tag starting with #.
6) handleDrop() and handleFileChange() function :- Both are used to select file which can be image or video and then calls handleFileSelect() function and setActivePostId
   images in postData in array. 
7) handleRemoveImage() function :- When user wants to deselect any image, a cancel icon above image calls this function and removes 
   image from data.

file destination :- src/Components/OtherPages/AllPopupComponent/PostDetailPopup.jsx
=> This component takes props -> isOpen, onClose, openPostDetail, postData, handlePostUpload
-> postData contains all data like description,tags,buddies_id etc. which comes from parent component.
This component is used to show the preview of how the post will look like.
1) User basic details are filled up using userDetails redux state variable.
2) onClose() function :- When clicked on Edit button, this function is called which open the CreateaPostPopup with filled data using postData variable.
3) handlePostUpload() function :- If user clicks on upload, this function is called in parent component, which uses redux function
   commitPost() and calls to post api.
=============================================================================================================================================

Module :- Search Bar
1) Using getUserDetails function showing users according to search value.
2) seacrhAccordingTo() function :- Given condition to show search according to:-
    i) Place
   ii) Buddies 
  iii) Tags 
   iv) Posts
    v) Badges
3) removeFromSeacrh() function :- Removes a option from search list.

===========================================================================================================================


Module :- Share Post (for PostCard.jsx page and commentPopup.jsx)

On commentPopup.jsx :- 
-> handleOpenSharePopup() function :- As soon as user clicks on share button, this function is called and setActivePostId() sets
   the postId active and setIsSharePopup() sets sharePopup true and it opens sharepopup.
-> handleSharePopupClose() function :- If users clicks on close button or finished it's sharing process, then this function is called.
  and updates the states to false and closes the popup.

PostCard.jsx :- Same as above

File destination :- src/Components/OtherPages/SharePopUp.jsx

-> handleSelect() function :- Working on selecting the buddies and store their ids in shareIds state.If selected then unselect and
   if unselected then select.
-> handleInputChange() function :- If user wants to send some message with post, then storing it in thoughts state.
-> handleShare() function :- When user clicks on share, this function is called and using redux function SharePostWithFriends() data is
   sent to backend and stored in db.
-> handleBuddiesData() function :- If user wants to search any particular buddy, then it shows buddy data according to it.

=============================================================================================================================

Right and Left Sidebar of Profile page(components) :-

-> When user clicks on see more posts a new page showing all posts data is shown(which have images only) :-
  Component Used :- PostDataDetailPage
  file destination :- src/Components/OtherPages/PostDataDetailPage.jsx (data is shown using userPosts slice)

-> When user clicks on see more buddies :-
   Component Used :- BuddiesPage.jsx, BuddiesPostCard.jsx
   file destination :- src/Components/OtherPages/BuddiesPage.jsx
   file destination :- src/Components/OtherPages/BuddiesPostCard.jsx

   In BuddiesPostCard.jsx :- 
   handleAddBuddy() function :- It is used to add user as buddy.
   handleBuddyRemove() function :- It is used to remove user as buddy.

-> When user clicks on see more followers :-
   Component Used :- FollowersPage.jsx, FollowersPostCard.jsx
   file destination :- src/Components/OtherPages/FollowersPage.jsx
   file destination :- src/Components/OtherPages/FollowersPostCard.jsx

   In FollowersPostCard :-
   handleAddBuddy() function :- It is used to add user as buddy.
   handleBuddyRemove() function :- It is used to remove user as buddy.
   handleFollowUnfollow() function :- It is used to follow a user.
   handleFollowUnfollowForFollowing() :- When user removes a following from its list, That data is not deleted from DB and shows on
                                          follower list.It is called to follow again.

-> When user clicks on see more followers :-
   Component Used :- FollowingPage.jsx, FollowingPostCard.jsx
   file destination :- src/Components/OtherPages/FollowingPage.jsx
   file destination :- src/Components/OtherPages/FollowingPostCard.jsx

   In FollowingPostCard :-
   handleAddBuddy() function :- It is used to add user as buddy.
   handleBuddyRemove() function :- It is used to remove user as buddy.
   handleFollowUnfollowForFollowing() function :- It is used to follow a user.

=====================================================================================================================================

Module :- ShowSharedPost

=> When user shares a post or copy post url and then paste on browser, then it will show the post but if user did not login and clicks
   on like comment button, he will be redirected to login, else he can perform any operation.

file destination :- src/Components/OtherPages/ShowSharedPost.jsx

-> This page is opened when url is hitted like :- http://localhost:5173/username/postid

-> When this page is opened redux function getSharePostData() is called through which post data is shown.

Main functions used :-
-> handleLikeUnlike() :- To like and unlike a post.
-> handleOpenCommentPopup() :- To open comments of post in a popup.
-> handleOpenBucketSavedPopup() :- To open bucket list popup.
-> handleOpenSharePopup() :- To open share popup .

======================================================================================================================================

Module :- Dashboard(landing page)

file destination :- src/Components/OtherPages/CommunityPage.jsx

-> Using allPosts redux state gets all posts(buddies, public, followers) and displays on UI.

Main functions used :-
-> handleLikeUnlike() :- To like and unlike a post.
-> handleOpenCommentPopup() :- To open comments of post in a popup.
-> handleOpenBucketSavedPopup() :- To open bucket list popup.
-> handleOpenSharePopup() :- To open share popup .
-> togglePopup() function :- To open the details of tagged buddies in a post.

-> badges stored in a variable
 const badges = {
    Adventurer: BadgesIconFirst,
    Explorer: BadgesIconFirst,
    Foodie: BadgesIconFirst,
    "Solo Traveler": BadgesIconFirst,
    "Luxury Traveler": BadgesIconFirst,
  };


Section :- Active Stories
-> Using activeStories redux state shown the list of active stories.

Major functions working :-
-> handleStoryReplyInputChange() function :- sets the values inserted in comment box in storyReply state.
-> handleEmojiClickStory() function :- Sets the selected emoji with text written in comment box in storyReply state.
-> handleStoryCommentEnter() function :- When user writes something in comment box and hits enter, then this function runs and calls
                                        commentOnStory() redux function.
-> handleLikeUnlikeStory() function :- To like and unlike any story.
-> blockTheUser() function :- To block any user.
-> handleOpenShareStoryPopup() function :- It is used to open a share popup having buddies in popup in the story section.
-> handleShareStoryPopupClose() function :- It is used to close share popup in story section.
====================================================================================================================================

Module:- Story Section

folder :- src/Component/OtherPages/AllStoriesPages

1) StoryPage.jsx :- It is being called on Community.jsx and ProfilePageHeaderData.jsx to upload a story
                  -> handleImageUpload() & handleDrop() function :- It is used to upload image and video with conditions of 4 images/videos and images
                                                     not more than 2 mb.
                 
                  -> storyData :- This state is used to manage data to be used to update on story.
                  -> handleStorySubmit() function :- It is calling redux createStory() function through which story data is saved in DB.
                  -> handleRemoveImage() :- It is used to remove selected image before uploading for story.
                  -> Badge is shown through ShowBadgeIcon Component.

2) StoryViewPage.jsx :- We are using stories-react package to view story of logged in user.
                  -> Using storyData(prop) which is coming for api(stories), displaying user story in sequential manner.
                  -> deleteThisStory() :- This function is used to delete the selected story.
                  

=====================================================================================================================================